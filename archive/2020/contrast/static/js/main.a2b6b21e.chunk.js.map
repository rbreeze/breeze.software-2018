{"version":3,"sources":["contrast.tsx","App.js","index.js"],"names":["parseChannel","c","cs","parseInt","Math","pow","relativeLuminance","hex","rgb","replace","result","exec","r","g","b","parseHex","contrast","one","two","a","luminance","tmp","stringToColor","s","parts","split","name","value","ColorEl","color","style","backgroundColor","padding","borderRadius","marginRight","width","textAlign","Comparisons","comps","copyVars","yellow","green","display","flexShrink","flexGrow","flexWrap","map","margin","alignItems","fontFamily","fontSize","aaa","aa","fontWeight","round","cursor","onClick","background","navigator","clipboard","writeText","className","Form","React","lines","setLines","comparisons","setComparisons","rawComparisons","setRawComparisons","AA","setAA","AAA","setAAA","setCopyVars","marginBottom","onChange","e","target","height","colors","i","prev","results","length","cont","push","CompareCombinations","l","linesToColors","filter","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2b6b21e.chunk.js","sourcesContent":["import * as React from 'react';\n\nconst parseHex = (hex: string) => {\n    hex = (hex || '').replace(/(\\r\\n|\\n|\\r)/gm, '') as string;\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? {\n              r: parseChannel(result[1]),\n              g: parseChannel(result[2]),\n              b: parseChannel(result[3]),\n          }\n        : null;\n};\n\nconst parseChannel = (c: string) => {\n    const cs = parseInt(c, 16) / 255;\n    return cs <= 0.03928 ? cs / 12.92 : Math.pow((cs + 0.055) / 1.055, 2.4);\n};\n\ninterface RGB {\n    r: number;\n    g: number;\n    b: number;\n}\n\nconst relativeLuminance = (hex: string) => {\n    hex = (hex || '').replace(' ', '').replace(/(\\r\\n|\\n|\\r)/gm, '') as string;\n    const rgb = parseHex(hex) || ({} as RGB);\n    return 0.2126 * rgb.r + 0.7152 * rgb.g + 0.0722 * rgb.b;\n};\n\nconst contrast = (one: Color, two: Color) => {\n    let a = one.luminance;\n    let b = two.luminance;\n    if (a > b) {\n        const tmp = a;\n        a = b;\n        b = tmp;\n    }\n    return 1 / ((a + 0.05) / (b + 0.05));\n};\n\nexport interface Color {\n    name: string;\n    value: string;\n    luminance: number;\n}\n\nexport interface Comparison {\n    a: Color;\n    b: Color;\n    contrast: number;\n    aa: boolean;\n    aaa: boolean;\n}\n\nexport const stringToColor = (s: string): Color => {\n    const parts = s.split(': ');\n    return {\n        name: parts[0].replace(/(\\r\\n|\\n|\\r)/gm, ''),\n        value: parts[1],\n        luminance: relativeLuminance(parts[1]),\n    } as Color;\n};\n\nexport const linesToColors = (l: string): Color[] => {\n    const result = [];\n    for (const s of l.split(';')) {\n        result.push(stringToColor(s));\n    }\n    return result;\n};\n\nexport const CompareCombinations = (colors: Color[]): Comparison[] => {\n    let i = 1;\n    let prev = 1;\n\n    const results: Comparison[] = [];\n    for (const a of colors) {\n        while (i < colors.length - 1) {\n            const b = colors[i];\n            const cont = contrast(a, b);\n            results.push({a, b, contrast: cont, aa: cont > 4.5, aaa: cont > 7});\n            i++;\n        }\n        prev++;\n        i = prev;\n    }\n\n    return results;\n};\n\nconst ColorEl = (c: Color) => {\n    const color = c.luminance < 0.4 ? 'white' : '#0d1117';\n    return <div style={{backgroundColor: c.value, padding: '10px', borderRadius: '5px', marginRight: '10px', width: '150px', textAlign: 'center', color}}>{c.name}</div>;\n};\n\nconst Comparisons = (comps: Comparison[], copyVars: boolean) => {\n    const yellow = '#e3b341';\n    const green = '#2ea043';\n    return (\n        <div style={{display: 'flex', flexShrink: 0, flexGrow: 1, flexWrap: 'wrap'}}>\n            {comps.map((c) => (\n                <div style={{display: 'flex', margin: '0.5em', alignItems: 'center'}}>\n                    {ColorEl(c.a)}\n                    {ColorEl(c.b)}\n                    <div\n                        style={{\n                            width: '50px',\n                            textAlign: 'center',\n                            fontFamily: 'Monaco',\n                            fontSize: '13px',\n                            marginRight: '10px',\n                            color: c.aaa ? green : c.aa ? yellow : 'white',\n                            fontWeight: c.aa ? 600 : 400,\n                        }}>\n                        {Math.round(c.contrast * 100) / 100}\n                    </div>\n                    <button\n                        style={{backgroundColor: c.a.value, color: c.b.value, padding: '5px', borderRadius: '3px', marginRight: '5px', cursor: 'pointer'}}\n                        onClick={async () => {\n                            const background = copyVars ? c.a.name : c.a.value;\n                            const color = copyVars ? c.b.name : c.b.value;\n                            await navigator.clipboard.writeText(`background-color: ${background};\\ncolor: ${color};\\n`);\n                        }}>\n                        COPY <i className='fa fa-clipboard' />\n                    </button>\n                    <div style={{width: '20px', textAlign: 'center'}}>\n                        {c.aaa ? (\n                            <i className='fa fa-check' style={{color: green}} />\n                        ) : c.aa ? (\n                            <i className='fa fa-exclamation-triangle' style={{color: yellow}} />\n                        ) : (\n                            <i className='fa fa-times' />\n                        )}\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport const Form = () => {\n    const [lines, setLines] = React.useState('');\n    const [comparisons, setComparisons] = React.useState([] as Comparison[]);\n    const [rawComparisons, setRawComparisons] = React.useState([] as Comparison[]);\n    const [AA, setAA] = React.useState(false);\n    const [AAA, setAAA] = React.useState(false);\n    const [copyVars, setCopyVars] = React.useState(false);\n    return (\n        <div>\n            <label style={{marginBottom: '0.5em'}}>SCSS Style Variables</label>\n            <p>Define variables with a colon, separate lines with a semicolon</p>\n            <textarea onChange={(e) => setLines(e.target.value)} value={lines} style={{height: '200px', width: '90%', marginBottom: '0.5em'}} />\n            <div style={{display: 'flex'}}>\n                <button\n                    onClick={() => {\n                        let comps = CompareCombinations(linesToColors(lines));\n                        setRawComparisons(comps);\n                        if (AA) {\n                            comps = comps.filter((c) => c.aa);\n                        }\n                        if (AAA) {\n                            comps = comps.filter((c) => c.aaa);\n                        }\n                        setComparisons(comps);\n                    }}>\n                    Compare\n                </button>\n                <button\n                    onClick={() => {\n                        setComparisons(!AA ? comparisons.filter((c) => c.aa) : rawComparisons);\n                        setAA(!AA);\n                    }}\n                    className={AA ? 'selected' : ''}>\n                    AA\n                </button>\n                <button\n                    onClick={() => {\n                        setComparisons(!AAA ? comparisons.filter((c) => c.aaa) : rawComparisons.filter((c) => (AA ? c.aa : true)));\n                        if (!AAA) {\n                            setAA(!AAA);\n                        }\n                        setAAA(!AAA);\n                    }}\n                    className={AAA ? 'selected' : ''}>\n                    AAA\n                </button>\n                <button\n                    onClick={() => {\n                        setCopyVars(!copyVars);\n                    }}\n                    className={copyVars ? 'selected' : ''}>\n                    Copy Variables <i className='fas fa-code' />\n                </button>\n            </div>\n            {comparisons.length > 0 && Comparisons(comparisons, copyVars)}\n        </div>\n    );\n};\n","import './App.css';\nimport {Form} from './contrast.tsx';\n\nfunction App() {\n    return (\n        <div className='App'>\n            <Form />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}